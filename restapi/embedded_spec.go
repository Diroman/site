// Code generated by go-swagger; DO NOT EDIT.

package restapi

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
)

var (
	// SwaggerJSON embedded version of the swagger document used at generation time
	SwaggerJSON json.RawMessage
	// FlatSwaggerJSON embedded flattened version of the swagger document used at generation time
	FlatSwaggerJSON json.RawMessage
)

func init() {
	SwaggerJSON = json.RawMessage([]byte(`{
  "schemes": [
    "http"
  ],
  "swagger": "2.0",
  "info": {
    "title": "Swagger LawBox",
    "contact": {
      "email": "roman.dubatov@gmail.com"
    },
    "version": "1.0.0"
  },
  "host": "127.0.0.1:8888",
  "basePath": "/",
  "paths": {
    "/api/auth/check_token": {
      "post": {
        "tags": [
          "auth"
        ],
        "operationId": "checkResetToken",
        "parameters": [
          {
            "name": "token",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/ResetToken"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          },
          "400": {
            "description": "User not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/api/auth/is_auth": {
      "get": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "tags": [
          "auth"
        ],
        "operationId": "isAuth",
        "responses": {
          "200": {
            "description": "successful operation"
          },
          "400": {
            "description": "bad request"
          },
          "401": {
            "description": "not valid token"
          }
        }
      }
    },
    "/api/auth/login": {
      "post": {
        "description": "This can login user",
        "produces": [
          "application/json"
        ],
        "tags": [
          "auth"
        ],
        "summary": "Logs user into the system",
        "operationId": "loginUser",
        "parameters": [
          {
            "description": "The user info for login",
            "name": "loginInfo",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Login"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Token"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Not valid token"
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/api/auth/logout": {
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "auth"
        ],
        "summary": "Logs out current logged in user session",
        "operationId": "logoutUser",
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/api/auth/registration": {
      "post": {
        "description": "This can only be done by the logged in user.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "auth"
        ],
        "summary": "Create user",
        "operationId": "registerUser",
        "parameters": [
          {
            "description": "Created user object",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Token"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/api/auth/send_reset_link": {
      "post": {
        "tags": [
          "auth"
        ],
        "operationId": "sendResetLink",
        "parameters": [
          {
            "name": "email",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/Email"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          },
          "400": {
            "description": "User not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/api/auth/update_password": {
      "post": {
        "tags": [
          "auth"
        ],
        "operationId": "updatePassword",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/UpdatePassword"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          },
          "400": {
            "description": "User not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/api/post/add": {
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "post"
        ],
        "summary": "Add new posts",
        "operationId": "addNewPost",
        "parameters": [
          {
            "description": "Post",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Post"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Id"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "not valid token"
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/api/post/delete": {
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "tags": [
          "post"
        ],
        "summary": "Delete posts",
        "operationId": "deletePost",
        "parameters": [
          {
            "description": "Id",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "not valid token"
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/api/post/list": {
      "get": {
        "tags": [
          "post"
        ],
        "summary": "Popular post for main page",
        "operationId": "getPostList",
        "parameters": [
          {
            "enum": [
              "lecture",
              "masterClass",
              "conference",
              "training",
              "webinars"
            ],
            "type": "string",
            "name": "eventType",
            "in": "query"
          },
          {
            "type": "string",
            "name": "dateFrom",
            "in": "query"
          },
          {
            "type": "string",
            "name": "dateTo",
            "in": "query"
          },
          {
            "enum": [
              "popularity",
              "date",
              "create_date"
            ],
            "type": "string",
            "name": "sortBy",
            "in": "query"
          },
          {
            "enum": [
              "asc",
              "desc"
            ],
            "type": "string",
            "name": "order",
            "in": "query"
          },
          {
            "type": "integer",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "integer",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "string",
            "name": "text",
            "in": "query"
          },
          {
            "enum": [
              "all",
              "new",
              "old"
            ],
            "type": "string",
            "name": "byTime",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/PostList"
            }
          },
          "400": {
            "description": "Invalid status value",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/api/post/nearest_event": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "post"
        ],
        "summary": "Nearest post for main page",
        "operationId": "getNearestPost",
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Post"
            }
          },
          "400": {
            "description": "Invalid status value",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/api/post/recommended": {
      "post": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "post"
        ],
        "summary": "Nearest post for main page",
        "operationId": "getRecommendedPost",
        "parameters": [
          {
            "description": "PostID",
            "name": "postID",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/PostList"
            }
          },
          "400": {
            "description": "Invalid status value",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/api/post/update": {
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "tags": [
          "post"
        ],
        "summary": "Update posts",
        "operationId": "updatePost",
        "parameters": [
          {
            "description": "Post",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Post"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "not valid token"
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/api/post/{id}": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "post"
        ],
        "summary": "Gets a post by ID.",
        "operationId": "getPostByID",
        "parameters": [
          {
            "type": "integer",
            "description": "Post ID",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Post"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/api/post/{id}/in_favorite": {
      "get": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "post"
        ],
        "summary": "Check post in favorite",
        "operationId": "checkPostInFavorite",
        "parameters": [
          {
            "type": "integer",
            "description": "Post ID",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Bool"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "not valid token",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/api/post/{id}/materials": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "post"
        ],
        "summary": "Gets a material by postID.",
        "operationId": "getMaterialByPostID",
        "parameters": [
          {
            "type": "integer",
            "description": "Post ID",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/MaterialList"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/api/post/{id}/materials/add": {
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "post"
        ],
        "summary": "Add new materials",
        "operationId": "addNewMaterialsForPost",
        "parameters": [
          {
            "type": "integer",
            "description": "Post ID",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "description": "Materials list",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MaterialList"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Id"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "not valid token"
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/api/post/{id}/materials/delete": {
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "tags": [
          "post"
        ],
        "summary": "Delete posts material",
        "operationId": "deletePostMaterial",
        "parameters": [
          {
            "type": "integer",
            "description": "Post ID",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "description": "Id",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "not valid token"
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/api/post/{id}/participants": {
      "get": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "post"
        ],
        "summary": "Get post participants",
        "operationId": "getPostParticipants",
        "parameters": [
          {
            "type": "integer",
            "description": "Post ID",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/UserList"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/api/post/{id}/update_link": {
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "post"
        ],
        "summary": "Update link in post.",
        "operationId": "updateLinkInPost",
        "parameters": [
          {
            "type": "integer",
            "description": "Post ID",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "description": "New youtube link",
            "name": "link",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Link"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/api/tools/feedback": {
      "post": {
        "tags": [
          "tools"
        ],
        "summary": "Send feedback",
        "operationId": "sendFeedback",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Feedback"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/api/user/info": {
      "get": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "user"
        ],
        "summary": "Get user info",
        "operationId": "getUserInfo",
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "not valid token",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "User not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/api/user/info/update": {
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "user"
        ],
        "summary": "Update user info",
        "operationId": "updateUserInfo",
        "parameters": [
          {
            "description": "Update user object",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "not valid token",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "User not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/api/user/posts": {
      "get": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "user"
        ],
        "summary": "Get user posts",
        "operationId": "getUserPosts",
        "parameters": [
          {
            "enum": [
              "all",
              "new",
              "old"
            ],
            "type": "string",
            "name": "byTime",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/PostList"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "not valid token",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/api/user/posts/add": {
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "user"
        ],
        "summary": "Add post in favorite",
        "operationId": "userPostsAdd",
        "parameters": [
          {
            "description": "Created user object",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "not valid token",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/api/user/posts/delete": {
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "user"
        ],
        "summary": "Delete post from favorite",
        "operationId": "userPostsDelete",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "not valid token",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/api/user/posts/own": {
      "get": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "user"
        ],
        "summary": "Get posts created by user",
        "operationId": "getUserCreatedPosts",
        "parameters": [
          {
            "enum": [
              "all",
              "new",
              "old"
            ],
            "type": "string",
            "name": "byTime",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/PostList"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "not valid token",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "Bool": {
      "type": "object",
      "properties": {
        "data": {
          "type": "boolean"
        }
      }
    },
    "Email": {
      "type": "object",
      "properties": {
        "value": {
          "type": "string"
        }
      }
    },
    "Error": {
      "type": "object",
      "properties": {
        "data": {
          "type": "object",
          "properties": {
            "error": {
              "type": "string"
            }
          }
        }
      }
    },
    "Feedback": {
      "type": "object",
      "properties": {
        "email": {
          "type": "string"
        },
        "text": {
          "type": "string"
        }
      }
    },
    "Id": {
      "type": "object",
      "properties": {
        "value": {
          "type": "integer"
        }
      }
    },
    "Link": {
      "type": "object",
      "properties": {
        "data": {
          "type": "string"
        }
      }
    },
    "List": {
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "Login": {
      "type": "object",
      "properties": {
        "data": {
          "type": "object",
          "properties": {
            "login": {
              "type": "string"
            },
            "password": {
              "type": "string"
            }
          }
        }
      }
    },
    "Material": {
      "type": "object",
      "properties": {
        "data": {
          "type": "object",
          "properties": {
            "file": {
              "description": "Link for upload file",
              "type": "string"
            },
            "id": {
              "type": "integer"
            },
            "link": {
              "type": "string"
            },
            "postID": {
              "type": "integer"
            },
            "text": {
              "description": "Text field",
              "type": "string"
            },
            "title": {
              "type": "string"
            }
          }
        }
      }
    },
    "MaterialList": {
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Material"
          }
        }
      }
    },
    "Post": {
      "type": "object",
      "properties": {
        "data": {
          "type": "object",
          "properties": {
            "body": {
              "type": "string"
            },
            "companies": {
              "type": "object",
              "$ref": "#/definitions/List"
            },
            "contactPhone": {
              "type": "string"
            },
            "contacts": {
              "type": "string"
            },
            "date": {
              "type": "string",
              "format": "date"
            },
            "duration": {
              "type": "string"
            },
            "eventType": {
              "type": "string"
            },
            "hashtag": {
              "type": "object",
              "$ref": "#/definitions/List"
            },
            "id": {
              "type": "integer"
            },
            "image": {
              "type": "string"
            },
            "memberCount": {
              "type": "integer"
            },
            "owner": {
              "type": "integer"
            },
            "place": {
              "type": "string"
            },
            "price": {
              "type": "string"
            },
            "socialMedia": {
              "type": "object",
              "$ref": "#/definitions/List"
            },
            "speakers": {
              "type": "object",
              "$ref": "#/definitions/List"
            },
            "timeEnd": {
              "type": "string"
            },
            "timeStart": {
              "type": "string"
            },
            "title": {
              "type": "string"
            },
            "translationLink": {
              "type": "string"
            },
            "youtubeLink": {
              "type": "string"
            }
          }
        }
      }
    },
    "PostList": {
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Post"
          }
        }
      }
    },
    "PostRequest": {
      "type": "object",
      "properties": {
        "data": {
          "type": "object",
          "properties": {
            "limit": {
              "type": "integer"
            },
            "offset": {
              "type": "integer"
            },
            "page": {
              "type": "string"
            },
            "sorting": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Sort"
              }
            }
          }
        }
      }
    },
    "ResetToken": {
      "type": "object",
      "properties": {
        "value": {
          "type": "string"
        }
      }
    },
    "Sort": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string"
        },
        "order": {
          "description": "Sort order:\n * ` + "`" + `asc` + "`" + ` - Ascending, from A to Z\n * ` + "`" + `desc` + "`" + ` - Descending, from Z to A\n",
          "type": "string",
          "enum": [
            "asc",
            "desc"
          ]
        }
      }
    },
    "Token": {
      "type": "object",
      "properties": {
        "data": {
          "type": "object",
          "properties": {
            "token": {
              "type": "string"
            }
          }
        }
      }
    },
    "UpdatePassword": {
      "type": "object",
      "properties": {
        "password": {
          "type": "string"
        },
        "token": {
          "type": "string"
        }
      }
    },
    "User": {
      "type": "object",
      "properties": {
        "data": {
          "type": "object",
          "properties": {
            "age": {
              "type": "integer",
              "maximum": 100,
              "minimum": 16
            },
            "email": {
              "type": "string"
            },
            "firstName": {
              "type": "string"
            },
            "lastName": {
              "type": "string"
            },
            "password": {
              "type": "string"
            },
            "phone": {
              "type": "string"
            },
            "role": {
              "description": "User Status",
              "type": "integer",
              "format": "int32"
            },
            "userStatus": {
              "type": "string"
            }
          }
        }
      }
    },
    "UserList": {
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/User"
          }
        }
      }
    }
  },
  "securityDefinitions": {
    "Bearer": {
      "type": "apiKey",
      "name": "Authorization",
      "in": "header"
    },
    "OauthSecurity": {
      "type": "oauth2",
      "flow": "accessCode",
      "authorizationUrl": "https://accounts.google.com/o/oauth2/v2/auth",
      "tokenUrl": "https://www.googleapis.com/oauth2/v4/token",
      "scopes": {
        "admin": "Admin scope",
        "user": "User scope"
      }
    }
  },
  "tags": [
    {
      "description": "Authentication",
      "name": "auth"
    },
    {
      "description": "Operations about user",
      "name": "user"
    },
    {
      "description": "Action with post",
      "name": "post"
    },
    {
      "description": "Other actions",
      "name": "tools"
    }
  ]
}`))
	FlatSwaggerJSON = json.RawMessage([]byte(`{
  "schemes": [
    "http"
  ],
  "swagger": "2.0",
  "info": {
    "title": "Swagger LawBox",
    "contact": {
      "email": "roman.dubatov@gmail.com"
    },
    "version": "1.0.0"
  },
  "host": "127.0.0.1:8888",
  "basePath": "/",
  "paths": {
    "/api/auth/check_token": {
      "post": {
        "tags": [
          "auth"
        ],
        "operationId": "checkResetToken",
        "parameters": [
          {
            "name": "token",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/ResetToken"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          },
          "400": {
            "description": "User not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/api/auth/is_auth": {
      "get": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "tags": [
          "auth"
        ],
        "operationId": "isAuth",
        "responses": {
          "200": {
            "description": "successful operation"
          },
          "400": {
            "description": "bad request"
          },
          "401": {
            "description": "not valid token"
          }
        }
      }
    },
    "/api/auth/login": {
      "post": {
        "description": "This can login user",
        "produces": [
          "application/json"
        ],
        "tags": [
          "auth"
        ],
        "summary": "Logs user into the system",
        "operationId": "loginUser",
        "parameters": [
          {
            "description": "The user info for login",
            "name": "loginInfo",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Login"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Token"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Not valid token"
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/api/auth/logout": {
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "auth"
        ],
        "summary": "Logs out current logged in user session",
        "operationId": "logoutUser",
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/api/auth/registration": {
      "post": {
        "description": "This can only be done by the logged in user.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "auth"
        ],
        "summary": "Create user",
        "operationId": "registerUser",
        "parameters": [
          {
            "description": "Created user object",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Token"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/api/auth/send_reset_link": {
      "post": {
        "tags": [
          "auth"
        ],
        "operationId": "sendResetLink",
        "parameters": [
          {
            "name": "email",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/Email"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          },
          "400": {
            "description": "User not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/api/auth/update_password": {
      "post": {
        "tags": [
          "auth"
        ],
        "operationId": "updatePassword",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/UpdatePassword"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          },
          "400": {
            "description": "User not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/api/post/add": {
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "post"
        ],
        "summary": "Add new posts",
        "operationId": "addNewPost",
        "parameters": [
          {
            "description": "Post",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Post"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Id"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "not valid token"
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/api/post/delete": {
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "tags": [
          "post"
        ],
        "summary": "Delete posts",
        "operationId": "deletePost",
        "parameters": [
          {
            "description": "Id",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "not valid token"
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/api/post/list": {
      "get": {
        "tags": [
          "post"
        ],
        "summary": "Popular post for main page",
        "operationId": "getPostList",
        "parameters": [
          {
            "enum": [
              "lecture",
              "masterClass",
              "conference",
              "training",
              "webinars"
            ],
            "type": "string",
            "name": "eventType",
            "in": "query"
          },
          {
            "type": "string",
            "name": "dateFrom",
            "in": "query"
          },
          {
            "type": "string",
            "name": "dateTo",
            "in": "query"
          },
          {
            "enum": [
              "popularity",
              "date",
              "create_date"
            ],
            "type": "string",
            "name": "sortBy",
            "in": "query"
          },
          {
            "enum": [
              "asc",
              "desc"
            ],
            "type": "string",
            "name": "order",
            "in": "query"
          },
          {
            "type": "integer",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "integer",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "string",
            "name": "text",
            "in": "query"
          },
          {
            "enum": [
              "all",
              "new",
              "old"
            ],
            "type": "string",
            "name": "byTime",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/PostList"
            }
          },
          "400": {
            "description": "Invalid status value",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/api/post/nearest_event": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "post"
        ],
        "summary": "Nearest post for main page",
        "operationId": "getNearestPost",
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Post"
            }
          },
          "400": {
            "description": "Invalid status value",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/api/post/recommended": {
      "post": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "post"
        ],
        "summary": "Nearest post for main page",
        "operationId": "getRecommendedPost",
        "parameters": [
          {
            "description": "PostID",
            "name": "postID",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/PostList"
            }
          },
          "400": {
            "description": "Invalid status value",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/api/post/update": {
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "tags": [
          "post"
        ],
        "summary": "Update posts",
        "operationId": "updatePost",
        "parameters": [
          {
            "description": "Post",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Post"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "not valid token"
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/api/post/{id}": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "post"
        ],
        "summary": "Gets a post by ID.",
        "operationId": "getPostByID",
        "parameters": [
          {
            "type": "integer",
            "description": "Post ID",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Post"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/api/post/{id}/in_favorite": {
      "get": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "post"
        ],
        "summary": "Check post in favorite",
        "operationId": "checkPostInFavorite",
        "parameters": [
          {
            "type": "integer",
            "description": "Post ID",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Bool"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "not valid token",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/api/post/{id}/materials": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "post"
        ],
        "summary": "Gets a material by postID.",
        "operationId": "getMaterialByPostID",
        "parameters": [
          {
            "type": "integer",
            "description": "Post ID",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/MaterialList"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/api/post/{id}/materials/add": {
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "post"
        ],
        "summary": "Add new materials",
        "operationId": "addNewMaterialsForPost",
        "parameters": [
          {
            "type": "integer",
            "description": "Post ID",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "description": "Materials list",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MaterialList"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Id"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "not valid token"
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/api/post/{id}/materials/delete": {
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "tags": [
          "post"
        ],
        "summary": "Delete posts material",
        "operationId": "deletePostMaterial",
        "parameters": [
          {
            "type": "integer",
            "description": "Post ID",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "description": "Id",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "not valid token"
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/api/post/{id}/participants": {
      "get": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "post"
        ],
        "summary": "Get post participants",
        "operationId": "getPostParticipants",
        "parameters": [
          {
            "type": "integer",
            "description": "Post ID",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/UserList"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/api/post/{id}/update_link": {
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "post"
        ],
        "summary": "Update link in post.",
        "operationId": "updateLinkInPost",
        "parameters": [
          {
            "type": "integer",
            "description": "Post ID",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "description": "New youtube link",
            "name": "link",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Link"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/api/tools/feedback": {
      "post": {
        "tags": [
          "tools"
        ],
        "summary": "Send feedback",
        "operationId": "sendFeedback",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Feedback"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/api/user/info": {
      "get": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "user"
        ],
        "summary": "Get user info",
        "operationId": "getUserInfo",
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "not valid token",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "User not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/api/user/info/update": {
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "user"
        ],
        "summary": "Update user info",
        "operationId": "updateUserInfo",
        "parameters": [
          {
            "description": "Update user object",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "not valid token",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "User not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/api/user/posts": {
      "get": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "user"
        ],
        "summary": "Get user posts",
        "operationId": "getUserPosts",
        "parameters": [
          {
            "enum": [
              "all",
              "new",
              "old"
            ],
            "type": "string",
            "name": "byTime",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/PostList"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "not valid token",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/api/user/posts/add": {
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "user"
        ],
        "summary": "Add post in favorite",
        "operationId": "userPostsAdd",
        "parameters": [
          {
            "description": "Created user object",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "not valid token",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/api/user/posts/delete": {
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "user"
        ],
        "summary": "Delete post from favorite",
        "operationId": "userPostsDelete",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "not valid token",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/api/user/posts/own": {
      "get": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "user"
        ],
        "summary": "Get posts created by user",
        "operationId": "getUserCreatedPosts",
        "parameters": [
          {
            "enum": [
              "all",
              "new",
              "old"
            ],
            "type": "string",
            "name": "byTime",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/PostList"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "not valid token",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "Bool": {
      "type": "object",
      "properties": {
        "data": {
          "type": "boolean"
        }
      }
    },
    "Email": {
      "type": "object",
      "properties": {
        "value": {
          "type": "string"
        }
      }
    },
    "Error": {
      "type": "object",
      "properties": {
        "data": {
          "type": "object",
          "properties": {
            "error": {
              "type": "string"
            }
          }
        }
      }
    },
    "ErrorData": {
      "type": "object",
      "properties": {
        "error": {
          "type": "string"
        }
      }
    },
    "Feedback": {
      "type": "object",
      "properties": {
        "email": {
          "type": "string"
        },
        "text": {
          "type": "string"
        }
      }
    },
    "Id": {
      "type": "object",
      "properties": {
        "value": {
          "type": "integer"
        }
      }
    },
    "Link": {
      "type": "object",
      "properties": {
        "data": {
          "type": "string"
        }
      }
    },
    "List": {
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "Login": {
      "type": "object",
      "properties": {
        "data": {
          "type": "object",
          "properties": {
            "login": {
              "type": "string"
            },
            "password": {
              "type": "string"
            }
          }
        }
      }
    },
    "LoginData": {
      "type": "object",
      "properties": {
        "login": {
          "type": "string"
        },
        "password": {
          "type": "string"
        }
      }
    },
    "Material": {
      "type": "object",
      "properties": {
        "data": {
          "type": "object",
          "properties": {
            "file": {
              "description": "Link for upload file",
              "type": "string"
            },
            "id": {
              "type": "integer"
            },
            "link": {
              "type": "string"
            },
            "postID": {
              "type": "integer"
            },
            "text": {
              "description": "Text field",
              "type": "string"
            },
            "title": {
              "type": "string"
            }
          }
        }
      }
    },
    "MaterialData": {
      "type": "object",
      "properties": {
        "file": {
          "description": "Link for upload file",
          "type": "string"
        },
        "id": {
          "type": "integer"
        },
        "link": {
          "type": "string"
        },
        "postID": {
          "type": "integer"
        },
        "text": {
          "description": "Text field",
          "type": "string"
        },
        "title": {
          "type": "string"
        }
      }
    },
    "MaterialList": {
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Material"
          }
        }
      }
    },
    "Post": {
      "type": "object",
      "properties": {
        "data": {
          "type": "object",
          "properties": {
            "body": {
              "type": "string"
            },
            "companies": {
              "type": "object",
              "$ref": "#/definitions/List"
            },
            "contactPhone": {
              "type": "string"
            },
            "contacts": {
              "type": "string"
            },
            "date": {
              "type": "string",
              "format": "date"
            },
            "duration": {
              "type": "string"
            },
            "eventType": {
              "type": "string"
            },
            "hashtag": {
              "type": "object",
              "$ref": "#/definitions/List"
            },
            "id": {
              "type": "integer"
            },
            "image": {
              "type": "string"
            },
            "memberCount": {
              "type": "integer"
            },
            "owner": {
              "type": "integer"
            },
            "place": {
              "type": "string"
            },
            "price": {
              "type": "string"
            },
            "socialMedia": {
              "type": "object",
              "$ref": "#/definitions/List"
            },
            "speakers": {
              "type": "object",
              "$ref": "#/definitions/List"
            },
            "timeEnd": {
              "type": "string"
            },
            "timeStart": {
              "type": "string"
            },
            "title": {
              "type": "string"
            },
            "translationLink": {
              "type": "string"
            },
            "youtubeLink": {
              "type": "string"
            }
          }
        }
      }
    },
    "PostData": {
      "type": "object",
      "properties": {
        "body": {
          "type": "string"
        },
        "companies": {
          "type": "object",
          "$ref": "#/definitions/List"
        },
        "contactPhone": {
          "type": "string"
        },
        "contacts": {
          "type": "string"
        },
        "date": {
          "type": "string",
          "format": "date"
        },
        "duration": {
          "type": "string"
        },
        "eventType": {
          "type": "string"
        },
        "hashtag": {
          "type": "object",
          "$ref": "#/definitions/List"
        },
        "id": {
          "type": "integer"
        },
        "image": {
          "type": "string"
        },
        "memberCount": {
          "type": "integer"
        },
        "owner": {
          "type": "integer"
        },
        "place": {
          "type": "string"
        },
        "price": {
          "type": "string"
        },
        "socialMedia": {
          "type": "object",
          "$ref": "#/definitions/List"
        },
        "speakers": {
          "type": "object",
          "$ref": "#/definitions/List"
        },
        "timeEnd": {
          "type": "string"
        },
        "timeStart": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "translationLink": {
          "type": "string"
        },
        "youtubeLink": {
          "type": "string"
        }
      }
    },
    "PostList": {
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Post"
          }
        }
      }
    },
    "PostRequest": {
      "type": "object",
      "properties": {
        "data": {
          "type": "object",
          "properties": {
            "limit": {
              "type": "integer"
            },
            "offset": {
              "type": "integer"
            },
            "page": {
              "type": "string"
            },
            "sorting": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Sort"
              }
            }
          }
        }
      }
    },
    "PostRequestData": {
      "type": "object",
      "properties": {
        "limit": {
          "type": "integer"
        },
        "offset": {
          "type": "integer"
        },
        "page": {
          "type": "string"
        },
        "sorting": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Sort"
          }
        }
      }
    },
    "ResetToken": {
      "type": "object",
      "properties": {
        "value": {
          "type": "string"
        }
      }
    },
    "Sort": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string"
        },
        "order": {
          "description": "Sort order:\n * ` + "`" + `asc` + "`" + ` - Ascending, from A to Z\n * ` + "`" + `desc` + "`" + ` - Descending, from Z to A\n",
          "type": "string",
          "enum": [
            "asc",
            "desc"
          ]
        }
      }
    },
    "Token": {
      "type": "object",
      "properties": {
        "data": {
          "type": "object",
          "properties": {
            "token": {
              "type": "string"
            }
          }
        }
      }
    },
    "TokenData": {
      "type": "object",
      "properties": {
        "token": {
          "type": "string"
        }
      }
    },
    "UpdatePassword": {
      "type": "object",
      "properties": {
        "password": {
          "type": "string"
        },
        "token": {
          "type": "string"
        }
      }
    },
    "User": {
      "type": "object",
      "properties": {
        "data": {
          "type": "object",
          "properties": {
            "age": {
              "type": "integer",
              "maximum": 100,
              "minimum": 16
            },
            "email": {
              "type": "string"
            },
            "firstName": {
              "type": "string"
            },
            "lastName": {
              "type": "string"
            },
            "password": {
              "type": "string"
            },
            "phone": {
              "type": "string"
            },
            "role": {
              "description": "User Status",
              "type": "integer",
              "format": "int32"
            },
            "userStatus": {
              "type": "string"
            }
          }
        }
      }
    },
    "UserData": {
      "type": "object",
      "properties": {
        "age": {
          "type": "integer",
          "maximum": 100,
          "minimum": 16
        },
        "email": {
          "type": "string"
        },
        "firstName": {
          "type": "string"
        },
        "lastName": {
          "type": "string"
        },
        "password": {
          "type": "string"
        },
        "phone": {
          "type": "string"
        },
        "role": {
          "description": "User Status",
          "type": "integer",
          "format": "int32"
        },
        "userStatus": {
          "type": "string"
        }
      }
    },
    "UserList": {
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/User"
          }
        }
      }
    }
  },
  "securityDefinitions": {
    "Bearer": {
      "type": "apiKey",
      "name": "Authorization",
      "in": "header"
    },
    "OauthSecurity": {
      "type": "oauth2",
      "flow": "accessCode",
      "authorizationUrl": "https://accounts.google.com/o/oauth2/v2/auth",
      "tokenUrl": "https://www.googleapis.com/oauth2/v4/token",
      "scopes": {
        "admin": "Admin scope",
        "user": "User scope"
      }
    }
  },
  "tags": [
    {
      "description": "Authentication",
      "name": "auth"
    },
    {
      "description": "Operations about user",
      "name": "user"
    },
    {
      "description": "Action with post",
      "name": "post"
    },
    {
      "description": "Other actions",
      "name": "tools"
    }
  ]
}`))
}
