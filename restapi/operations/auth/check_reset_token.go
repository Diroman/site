// Code generated by go-swagger; DO NOT EDIT.

package auth

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// CheckResetTokenHandlerFunc turns a function with the right signature into a check reset token handler
type CheckResetTokenHandlerFunc func(CheckResetTokenParams) middleware.Responder

// Handle executing the request and returning a response
func (fn CheckResetTokenHandlerFunc) Handle(params CheckResetTokenParams) middleware.Responder {
	return fn(params)
}

// CheckResetTokenHandler interface for that can handle valid check reset token params
type CheckResetTokenHandler interface {
	Handle(CheckResetTokenParams) middleware.Responder
}

// NewCheckResetToken creates a new http.Handler for the check reset token operation
func NewCheckResetToken(ctx *middleware.Context, handler CheckResetTokenHandler) *CheckResetToken {
	return &CheckResetToken{Context: ctx, Handler: handler}
}

/* CheckResetToken swagger:route POST /api/auth/check_token auth checkResetToken

CheckResetToken check reset token API

*/
type CheckResetToken struct {
	Context *middleware.Context
	Handler CheckResetTokenHandler
}

func (o *CheckResetToken) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewCheckResetTokenParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
