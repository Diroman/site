// Code generated by go-swagger; DO NOT EDIT.

package auth

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"lawSite/models"
)

// CheckResetTokenOKCode is the HTTP code returned for type CheckResetTokenOK
const CheckResetTokenOKCode int = 200

/*CheckResetTokenOK successful operation

swagger:response checkResetTokenOK
*/
type CheckResetTokenOK struct {
}

// NewCheckResetTokenOK creates CheckResetTokenOK with default headers values
func NewCheckResetTokenOK() *CheckResetTokenOK {

	return &CheckResetTokenOK{}
}

// WriteResponse to the client
func (o *CheckResetTokenOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(200)
}

// CheckResetTokenBadRequestCode is the HTTP code returned for type CheckResetTokenBadRequest
const CheckResetTokenBadRequestCode int = 400

/*CheckResetTokenBadRequest User not found

swagger:response checkResetTokenBadRequest
*/
type CheckResetTokenBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewCheckResetTokenBadRequest creates CheckResetTokenBadRequest with default headers values
func NewCheckResetTokenBadRequest() *CheckResetTokenBadRequest {

	return &CheckResetTokenBadRequest{}
}

// WithPayload adds the payload to the check reset token bad request response
func (o *CheckResetTokenBadRequest) WithPayload(payload *models.Error) *CheckResetTokenBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the check reset token bad request response
func (o *CheckResetTokenBadRequest) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CheckResetTokenBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
