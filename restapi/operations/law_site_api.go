// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"net/http"
	"strings"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/loads"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/runtime/security"
	"github.com/go-openapi/spec"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"lawSite/restapi/operations/auth"
	"lawSite/restapi/operations/post"
	"lawSite/restapi/operations/tools"
	"lawSite/restapi/operations/user"
)

// NewLawSiteAPI creates a new LawSite instance
func NewLawSiteAPI(spec *loads.Document) *LawSiteAPI {
	return &LawSiteAPI{
		handlers:            make(map[string]map[string]http.Handler),
		formats:             strfmt.Default,
		defaultConsumes:     "application/json",
		defaultProduces:     "application/json",
		customConsumers:     make(map[string]runtime.Consumer),
		customProducers:     make(map[string]runtime.Producer),
		PreServerShutdown:   func() {},
		ServerShutdown:      func() {},
		spec:                spec,
		useSwaggerUI:        false,
		ServeError:          errors.ServeError,
		BasicAuthenticator:  security.BasicAuth,
		APIKeyAuthenticator: security.APIKeyAuth,
		BearerAuthenticator: security.BearerAuth,

		JSONConsumer: runtime.JSONConsumer(),

		JSONProducer: runtime.JSONProducer(),

		PostAddNewMaterialsForPostHandler: post.AddNewMaterialsForPostHandlerFunc(func(params post.AddNewMaterialsForPostParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation post.AddNewMaterialsForPost has not yet been implemented")
		}),
		PostAddNewPostHandler: post.AddNewPostHandlerFunc(func(params post.AddNewPostParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation post.AddNewPost has not yet been implemented")
		}),
		PostCheckPostInFavoriteHandler: post.CheckPostInFavoriteHandlerFunc(func(params post.CheckPostInFavoriteParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation post.CheckPostInFavorite has not yet been implemented")
		}),
		AuthCheckResetTokenHandler: auth.CheckResetTokenHandlerFunc(func(params auth.CheckResetTokenParams) middleware.Responder {
			return middleware.NotImplemented("operation auth.CheckResetToken has not yet been implemented")
		}),
		PostDeletePostHandler: post.DeletePostHandlerFunc(func(params post.DeletePostParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation post.DeletePost has not yet been implemented")
		}),
		PostDeletePostMaterialHandler: post.DeletePostMaterialHandlerFunc(func(params post.DeletePostMaterialParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation post.DeletePostMaterial has not yet been implemented")
		}),
		PostGetMaterialByPostIDHandler: post.GetMaterialByPostIDHandlerFunc(func(params post.GetMaterialByPostIDParams) middleware.Responder {
			return middleware.NotImplemented("operation post.GetMaterialByPostID has not yet been implemented")
		}),
		PostGetNearestPostHandler: post.GetNearestPostHandlerFunc(func(params post.GetNearestPostParams) middleware.Responder {
			return middleware.NotImplemented("operation post.GetNearestPost has not yet been implemented")
		}),
		PostGetPostByIDHandler: post.GetPostByIDHandlerFunc(func(params post.GetPostByIDParams) middleware.Responder {
			return middleware.NotImplemented("operation post.GetPostByID has not yet been implemented")
		}),
		PostGetPostListHandler: post.GetPostListHandlerFunc(func(params post.GetPostListParams) middleware.Responder {
			return middleware.NotImplemented("operation post.GetPostList has not yet been implemented")
		}),
		PostGetPostParticipantsHandler: post.GetPostParticipantsHandlerFunc(func(params post.GetPostParticipantsParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation post.GetPostParticipants has not yet been implemented")
		}),
		PostGetRecommendedPostHandler: post.GetRecommendedPostHandlerFunc(func(params post.GetRecommendedPostParams) middleware.Responder {
			return middleware.NotImplemented("operation post.GetRecommendedPost has not yet been implemented")
		}),
		UserGetUserCreatedPostsHandler: user.GetUserCreatedPostsHandlerFunc(func(params user.GetUserCreatedPostsParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation user.GetUserCreatedPosts has not yet been implemented")
		}),
		UserGetUserInfoHandler: user.GetUserInfoHandlerFunc(func(params user.GetUserInfoParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation user.GetUserInfo has not yet been implemented")
		}),
		UserGetUserPostsHandler: user.GetUserPostsHandlerFunc(func(params user.GetUserPostsParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation user.GetUserPosts has not yet been implemented")
		}),
		AuthIsAuthHandler: auth.IsAuthHandlerFunc(func(params auth.IsAuthParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation auth.IsAuth has not yet been implemented")
		}),
		AuthLoginUserHandler: auth.LoginUserHandlerFunc(func(params auth.LoginUserParams) middleware.Responder {
			return middleware.NotImplemented("operation auth.LoginUser has not yet been implemented")
		}),
		AuthLogoutUserHandler: auth.LogoutUserHandlerFunc(func(params auth.LogoutUserParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation auth.LogoutUser has not yet been implemented")
		}),
		AuthRegisterUserHandler: auth.RegisterUserHandlerFunc(func(params auth.RegisterUserParams) middleware.Responder {
			return middleware.NotImplemented("operation auth.RegisterUser has not yet been implemented")
		}),
		ToolsSendFeedbackHandler: tools.SendFeedbackHandlerFunc(func(params tools.SendFeedbackParams) middleware.Responder {
			return middleware.NotImplemented("operation tools.SendFeedback has not yet been implemented")
		}),
		AuthSendResetLinkHandler: auth.SendResetLinkHandlerFunc(func(params auth.SendResetLinkParams) middleware.Responder {
			return middleware.NotImplemented("operation auth.SendResetLink has not yet been implemented")
		}),
		PostUpdateLinkInPostHandler: post.UpdateLinkInPostHandlerFunc(func(params post.UpdateLinkInPostParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation post.UpdateLinkInPost has not yet been implemented")
		}),
		AuthUpdatePasswordHandler: auth.UpdatePasswordHandlerFunc(func(params auth.UpdatePasswordParams) middleware.Responder {
			return middleware.NotImplemented("operation auth.UpdatePassword has not yet been implemented")
		}),
		PostUpdatePostHandler: post.UpdatePostHandlerFunc(func(params post.UpdatePostParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation post.UpdatePost has not yet been implemented")
		}),
		UserUpdateUserInfoHandler: user.UpdateUserInfoHandlerFunc(func(params user.UpdateUserInfoParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation user.UpdateUserInfo has not yet been implemented")
		}),
		UserUserPostsAddHandler: user.UserPostsAddHandlerFunc(func(params user.UserPostsAddParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation user.UserPostsAdd has not yet been implemented")
		}),
		UserUserPostsDeleteHandler: user.UserPostsDeleteHandlerFunc(func(params user.UserPostsDeleteParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation user.UserPostsDelete has not yet been implemented")
		}),

		// Applies when the "Authorization" header is set
		BearerAuth: func(token string) (interface{}, error) {
			return nil, errors.NotImplemented("api key auth (Bearer) Authorization from header param [Authorization] has not yet been implemented")
		},
		// default authorizer is authorized meaning no requests are blocked
		APIAuthorizer: security.Authorized(),
	}
}

/*LawSiteAPI the law site API */
type LawSiteAPI struct {
	spec            *loads.Document
	context         *middleware.Context
	handlers        map[string]map[string]http.Handler
	formats         strfmt.Registry
	customConsumers map[string]runtime.Consumer
	customProducers map[string]runtime.Producer
	defaultConsumes string
	defaultProduces string
	Middleware      func(middleware.Builder) http.Handler
	useSwaggerUI    bool

	// BasicAuthenticator generates a runtime.Authenticator from the supplied basic auth function.
	// It has a default implementation in the security package, however you can replace it for your particular usage.
	BasicAuthenticator func(security.UserPassAuthentication) runtime.Authenticator

	// APIKeyAuthenticator generates a runtime.Authenticator from the supplied token auth function.
	// It has a default implementation in the security package, however you can replace it for your particular usage.
	APIKeyAuthenticator func(string, string, security.TokenAuthentication) runtime.Authenticator

	// BearerAuthenticator generates a runtime.Authenticator from the supplied bearer token auth function.
	// It has a default implementation in the security package, however you can replace it for your particular usage.
	BearerAuthenticator func(string, security.ScopedTokenAuthentication) runtime.Authenticator

	// JSONConsumer registers a consumer for the following mime types:
	//   - application/json
	JSONConsumer runtime.Consumer

	// JSONProducer registers a producer for the following mime types:
	//   - application/json
	JSONProducer runtime.Producer

	// BearerAuth registers a function that takes a token and returns a principal
	// it performs authentication based on an api key Authorization provided in the header
	BearerAuth func(string) (interface{}, error)

	// APIAuthorizer provides access control (ACL/RBAC/ABAC) by providing access to the request and authenticated principal
	APIAuthorizer runtime.Authorizer

	// PostAddNewMaterialsForPostHandler sets the operation handler for the add new materials for post operation
	PostAddNewMaterialsForPostHandler post.AddNewMaterialsForPostHandler
	// PostAddNewPostHandler sets the operation handler for the add new post operation
	PostAddNewPostHandler post.AddNewPostHandler
	// PostCheckPostInFavoriteHandler sets the operation handler for the check post in favorite operation
	PostCheckPostInFavoriteHandler post.CheckPostInFavoriteHandler
	// AuthCheckResetTokenHandler sets the operation handler for the check reset token operation
	AuthCheckResetTokenHandler auth.CheckResetTokenHandler
	// PostDeletePostHandler sets the operation handler for the delete post operation
	PostDeletePostHandler post.DeletePostHandler
	// PostDeletePostMaterialHandler sets the operation handler for the delete post material operation
	PostDeletePostMaterialHandler post.DeletePostMaterialHandler
	// PostGetMaterialByPostIDHandler sets the operation handler for the get material by post ID operation
	PostGetMaterialByPostIDHandler post.GetMaterialByPostIDHandler
	// PostGetNearestPostHandler sets the operation handler for the get nearest post operation
	PostGetNearestPostHandler post.GetNearestPostHandler
	// PostGetPostByIDHandler sets the operation handler for the get post by ID operation
	PostGetPostByIDHandler post.GetPostByIDHandler
	// PostGetPostListHandler sets the operation handler for the get post list operation
	PostGetPostListHandler post.GetPostListHandler
	// PostGetPostParticipantsHandler sets the operation handler for the get post participants operation
	PostGetPostParticipantsHandler post.GetPostParticipantsHandler
	// PostGetRecommendedPostHandler sets the operation handler for the get recommended post operation
	PostGetRecommendedPostHandler post.GetRecommendedPostHandler
	// UserGetUserCreatedPostsHandler sets the operation handler for the get user created posts operation
	UserGetUserCreatedPostsHandler user.GetUserCreatedPostsHandler
	// UserGetUserInfoHandler sets the operation handler for the get user info operation
	UserGetUserInfoHandler user.GetUserInfoHandler
	// UserGetUserPostsHandler sets the operation handler for the get user posts operation
	UserGetUserPostsHandler user.GetUserPostsHandler
	// AuthIsAuthHandler sets the operation handler for the is auth operation
	AuthIsAuthHandler auth.IsAuthHandler
	// AuthLoginUserHandler sets the operation handler for the login user operation
	AuthLoginUserHandler auth.LoginUserHandler
	// AuthLogoutUserHandler sets the operation handler for the logout user operation
	AuthLogoutUserHandler auth.LogoutUserHandler
	// AuthRegisterUserHandler sets the operation handler for the register user operation
	AuthRegisterUserHandler auth.RegisterUserHandler
	// ToolsSendFeedbackHandler sets the operation handler for the send feedback operation
	ToolsSendFeedbackHandler tools.SendFeedbackHandler
	// AuthSendResetLinkHandler sets the operation handler for the send reset link operation
	AuthSendResetLinkHandler auth.SendResetLinkHandler
	// PostUpdateLinkInPostHandler sets the operation handler for the update link in post operation
	PostUpdateLinkInPostHandler post.UpdateLinkInPostHandler
	// AuthUpdatePasswordHandler sets the operation handler for the update password operation
	AuthUpdatePasswordHandler auth.UpdatePasswordHandler
	// PostUpdatePostHandler sets the operation handler for the update post operation
	PostUpdatePostHandler post.UpdatePostHandler
	// UserUpdateUserInfoHandler sets the operation handler for the update user info operation
	UserUpdateUserInfoHandler user.UpdateUserInfoHandler
	// UserUserPostsAddHandler sets the operation handler for the user posts add operation
	UserUserPostsAddHandler user.UserPostsAddHandler
	// UserUserPostsDeleteHandler sets the operation handler for the user posts delete operation
	UserUserPostsDeleteHandler user.UserPostsDeleteHandler

	// ServeError is called when an error is received, there is a default handler
	// but you can set your own with this
	ServeError func(http.ResponseWriter, *http.Request, error)

	// PreServerShutdown is called before the HTTP(S) server is shutdown
	// This allows for custom functions to get executed before the HTTP(S) server stops accepting traffic
	PreServerShutdown func()

	// ServerShutdown is called when the HTTP(S) server is shut down and done
	// handling all active connections and does not accept connections any more
	ServerShutdown func()

	// Custom command line argument groups with their descriptions
	CommandLineOptionsGroups []swag.CommandLineOptionsGroup

	// User defined logger function.
	Logger func(string, ...interface{})
}

// UseRedoc for documentation at /docs
func (o *LawSiteAPI) UseRedoc() {
	o.useSwaggerUI = false
}

// UseSwaggerUI for documentation at /docs
func (o *LawSiteAPI) UseSwaggerUI() {
	o.useSwaggerUI = true
}

// SetDefaultProduces sets the default produces media type
func (o *LawSiteAPI) SetDefaultProduces(mediaType string) {
	o.defaultProduces = mediaType
}

// SetDefaultConsumes returns the default consumes media type
func (o *LawSiteAPI) SetDefaultConsumes(mediaType string) {
	o.defaultConsumes = mediaType
}

// SetSpec sets a spec that will be served for the clients.
func (o *LawSiteAPI) SetSpec(spec *loads.Document) {
	o.spec = spec
}

// DefaultProduces returns the default produces media type
func (o *LawSiteAPI) DefaultProduces() string {
	return o.defaultProduces
}

// DefaultConsumes returns the default consumes media type
func (o *LawSiteAPI) DefaultConsumes() string {
	return o.defaultConsumes
}

// Formats returns the registered string formats
func (o *LawSiteAPI) Formats() strfmt.Registry {
	return o.formats
}

// RegisterFormat registers a custom format validator
func (o *LawSiteAPI) RegisterFormat(name string, format strfmt.Format, validator strfmt.Validator) {
	o.formats.Add(name, format, validator)
}

// Validate validates the registrations in the LawSiteAPI
func (o *LawSiteAPI) Validate() error {
	var unregistered []string

	if o.JSONConsumer == nil {
		unregistered = append(unregistered, "JSONConsumer")
	}

	if o.JSONProducer == nil {
		unregistered = append(unregistered, "JSONProducer")
	}

	if o.BearerAuth == nil {
		unregistered = append(unregistered, "AuthorizationAuth")
	}

	if o.PostAddNewMaterialsForPostHandler == nil {
		unregistered = append(unregistered, "post.AddNewMaterialsForPostHandler")
	}
	if o.PostAddNewPostHandler == nil {
		unregistered = append(unregistered, "post.AddNewPostHandler")
	}
	if o.PostCheckPostInFavoriteHandler == nil {
		unregistered = append(unregistered, "post.CheckPostInFavoriteHandler")
	}
	if o.AuthCheckResetTokenHandler == nil {
		unregistered = append(unregistered, "auth.CheckResetTokenHandler")
	}
	if o.PostDeletePostHandler == nil {
		unregistered = append(unregistered, "post.DeletePostHandler")
	}
	if o.PostDeletePostMaterialHandler == nil {
		unregistered = append(unregistered, "post.DeletePostMaterialHandler")
	}
	if o.PostGetMaterialByPostIDHandler == nil {
		unregistered = append(unregistered, "post.GetMaterialByPostIDHandler")
	}
	if o.PostGetNearestPostHandler == nil {
		unregistered = append(unregistered, "post.GetNearestPostHandler")
	}
	if o.PostGetPostByIDHandler == nil {
		unregistered = append(unregistered, "post.GetPostByIDHandler")
	}
	if o.PostGetPostListHandler == nil {
		unregistered = append(unregistered, "post.GetPostListHandler")
	}
	if o.PostGetPostParticipantsHandler == nil {
		unregistered = append(unregistered, "post.GetPostParticipantsHandler")
	}
	if o.PostGetRecommendedPostHandler == nil {
		unregistered = append(unregistered, "post.GetRecommendedPostHandler")
	}
	if o.UserGetUserCreatedPostsHandler == nil {
		unregistered = append(unregistered, "user.GetUserCreatedPostsHandler")
	}
	if o.UserGetUserInfoHandler == nil {
		unregistered = append(unregistered, "user.GetUserInfoHandler")
	}
	if o.UserGetUserPostsHandler == nil {
		unregistered = append(unregistered, "user.GetUserPostsHandler")
	}
	if o.AuthIsAuthHandler == nil {
		unregistered = append(unregistered, "auth.IsAuthHandler")
	}
	if o.AuthLoginUserHandler == nil {
		unregistered = append(unregistered, "auth.LoginUserHandler")
	}
	if o.AuthLogoutUserHandler == nil {
		unregistered = append(unregistered, "auth.LogoutUserHandler")
	}
	if o.AuthRegisterUserHandler == nil {
		unregistered = append(unregistered, "auth.RegisterUserHandler")
	}
	if o.ToolsSendFeedbackHandler == nil {
		unregistered = append(unregistered, "tools.SendFeedbackHandler")
	}
	if o.AuthSendResetLinkHandler == nil {
		unregistered = append(unregistered, "auth.SendResetLinkHandler")
	}
	if o.PostUpdateLinkInPostHandler == nil {
		unregistered = append(unregistered, "post.UpdateLinkInPostHandler")
	}
	if o.AuthUpdatePasswordHandler == nil {
		unregistered = append(unregistered, "auth.UpdatePasswordHandler")
	}
	if o.PostUpdatePostHandler == nil {
		unregistered = append(unregistered, "post.UpdatePostHandler")
	}
	if o.UserUpdateUserInfoHandler == nil {
		unregistered = append(unregistered, "user.UpdateUserInfoHandler")
	}
	if o.UserUserPostsAddHandler == nil {
		unregistered = append(unregistered, "user.UserPostsAddHandler")
	}
	if o.UserUserPostsDeleteHandler == nil {
		unregistered = append(unregistered, "user.UserPostsDeleteHandler")
	}

	if len(unregistered) > 0 {
		return fmt.Errorf("missing registration: %s", strings.Join(unregistered, ", "))
	}

	return nil
}

// ServeErrorFor gets a error handler for a given operation id
func (o *LawSiteAPI) ServeErrorFor(operationID string) func(http.ResponseWriter, *http.Request, error) {
	return o.ServeError
}

// AuthenticatorsFor gets the authenticators for the specified security schemes
func (o *LawSiteAPI) AuthenticatorsFor(schemes map[string]spec.SecurityScheme) map[string]runtime.Authenticator {
	result := make(map[string]runtime.Authenticator)
	for name := range schemes {
		switch name {
		case "Bearer":
			scheme := schemes[name]
			result[name] = o.APIKeyAuthenticator(scheme.Name, scheme.In, o.BearerAuth)

		}
	}
	return result
}

// Authorizer returns the registered authorizer
func (o *LawSiteAPI) Authorizer() runtime.Authorizer {
	return o.APIAuthorizer
}

// ConsumersFor gets the consumers for the specified media types.
// MIME type parameters are ignored here.
func (o *LawSiteAPI) ConsumersFor(mediaTypes []string) map[string]runtime.Consumer {
	result := make(map[string]runtime.Consumer, len(mediaTypes))
	for _, mt := range mediaTypes {
		switch mt {
		case "application/json":
			result["application/json"] = o.JSONConsumer
		}

		if c, ok := o.customConsumers[mt]; ok {
			result[mt] = c
		}
	}
	return result
}

// ProducersFor gets the producers for the specified media types.
// MIME type parameters are ignored here.
func (o *LawSiteAPI) ProducersFor(mediaTypes []string) map[string]runtime.Producer {
	result := make(map[string]runtime.Producer, len(mediaTypes))
	for _, mt := range mediaTypes {
		switch mt {
		case "application/json":
			result["application/json"] = o.JSONProducer
		}

		if p, ok := o.customProducers[mt]; ok {
			result[mt] = p
		}
	}
	return result
}

// HandlerFor gets a http.Handler for the provided operation method and path
func (o *LawSiteAPI) HandlerFor(method, path string) (http.Handler, bool) {
	if o.handlers == nil {
		return nil, false
	}
	um := strings.ToUpper(method)
	if _, ok := o.handlers[um]; !ok {
		return nil, false
	}
	if path == "/" {
		path = ""
	}
	h, ok := o.handlers[um][path]
	return h, ok
}

// Context returns the middleware context for the law site API
func (o *LawSiteAPI) Context() *middleware.Context {
	if o.context == nil {
		o.context = middleware.NewRoutableContext(o.spec, o, nil)
	}

	return o.context
}

func (o *LawSiteAPI) initHandlerCache() {
	o.Context() // don't care about the result, just that the initialization happened
	if o.handlers == nil {
		o.handlers = make(map[string]map[string]http.Handler)
	}

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/api/post/{id}/materials/add"] = post.NewAddNewMaterialsForPost(o.context, o.PostAddNewMaterialsForPostHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/api/post/add"] = post.NewAddNewPost(o.context, o.PostAddNewPostHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/api/post/{id}/in_favorite"] = post.NewCheckPostInFavorite(o.context, o.PostCheckPostInFavoriteHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/api/auth/check_token"] = auth.NewCheckResetToken(o.context, o.AuthCheckResetTokenHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/api/post/delete"] = post.NewDeletePost(o.context, o.PostDeletePostHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/api/post/{id}/materials/delete"] = post.NewDeletePostMaterial(o.context, o.PostDeletePostMaterialHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/api/post/{id}/materials"] = post.NewGetMaterialByPostID(o.context, o.PostGetMaterialByPostIDHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/api/post/nearest_event"] = post.NewGetNearestPost(o.context, o.PostGetNearestPostHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/api/post/{id}"] = post.NewGetPostByID(o.context, o.PostGetPostByIDHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/api/post/list"] = post.NewGetPostList(o.context, o.PostGetPostListHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/api/post/{id}/participants"] = post.NewGetPostParticipants(o.context, o.PostGetPostParticipantsHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/api/post/recommended"] = post.NewGetRecommendedPost(o.context, o.PostGetRecommendedPostHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/api/user/posts/own"] = user.NewGetUserCreatedPosts(o.context, o.UserGetUserCreatedPostsHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/api/user/info"] = user.NewGetUserInfo(o.context, o.UserGetUserInfoHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/api/user/posts"] = user.NewGetUserPosts(o.context, o.UserGetUserPostsHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/api/auth/is_auth"] = auth.NewIsAuth(o.context, o.AuthIsAuthHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/api/auth/login"] = auth.NewLoginUser(o.context, o.AuthLoginUserHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/api/auth/logout"] = auth.NewLogoutUser(o.context, o.AuthLogoutUserHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/api/auth/registration"] = auth.NewRegisterUser(o.context, o.AuthRegisterUserHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/api/tools/feedback"] = tools.NewSendFeedback(o.context, o.ToolsSendFeedbackHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/api/auth/send_reset_link"] = auth.NewSendResetLink(o.context, o.AuthSendResetLinkHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/api/post/{id}/update_link"] = post.NewUpdateLinkInPost(o.context, o.PostUpdateLinkInPostHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/api/auth/update_password"] = auth.NewUpdatePassword(o.context, o.AuthUpdatePasswordHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/api/post/update"] = post.NewUpdatePost(o.context, o.PostUpdatePostHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/api/user/info/update"] = user.NewUpdateUserInfo(o.context, o.UserUpdateUserInfoHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/api/user/posts/add"] = user.NewUserPostsAdd(o.context, o.UserUserPostsAddHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/api/user/posts/delete"] = user.NewUserPostsDelete(o.context, o.UserUserPostsDeleteHandler)
}

// Serve creates a http handler to serve the API over HTTP
// can be used directly in http.ListenAndServe(":8000", api.Serve(nil))
func (o *LawSiteAPI) Serve(builder middleware.Builder) http.Handler {
	o.Init()

	if o.Middleware != nil {
		return o.Middleware(builder)
	}
	if o.useSwaggerUI {
		return o.context.APIHandlerSwaggerUI(builder)
	}
	return o.context.APIHandler(builder)
}

// Init allows you to just initialize the handler cache, you can then recompose the middleware as you see fit
func (o *LawSiteAPI) Init() {
	if len(o.handlers) == 0 {
		o.initHandlerCache()
	}
}

// RegisterConsumer allows you to add (or override) a consumer for a media type.
func (o *LawSiteAPI) RegisterConsumer(mediaType string, consumer runtime.Consumer) {
	o.customConsumers[mediaType] = consumer
}

// RegisterProducer allows you to add (or override) a producer for a media type.
func (o *LawSiteAPI) RegisterProducer(mediaType string, producer runtime.Producer) {
	o.customProducers[mediaType] = producer
}

// AddMiddlewareFor adds a http middleware to existing handler
func (o *LawSiteAPI) AddMiddlewareFor(method, path string, builder middleware.Builder) {
	um := strings.ToUpper(method)
	if path == "/" {
		path = ""
	}
	o.Init()
	if h, ok := o.handlers[um][path]; ok {
		o.handlers[method][path] = builder(h)
	}
}
