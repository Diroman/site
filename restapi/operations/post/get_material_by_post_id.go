// Code generated by go-swagger; DO NOT EDIT.

package post

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// GetMaterialByPostIDHandlerFunc turns a function with the right signature into a get material by post ID handler
type GetMaterialByPostIDHandlerFunc func(GetMaterialByPostIDParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetMaterialByPostIDHandlerFunc) Handle(params GetMaterialByPostIDParams) middleware.Responder {
	return fn(params)
}

// GetMaterialByPostIDHandler interface for that can handle valid get material by post ID params
type GetMaterialByPostIDHandler interface {
	Handle(GetMaterialByPostIDParams) middleware.Responder
}

// NewGetMaterialByPostID creates a new http.Handler for the get material by post ID operation
func NewGetMaterialByPostID(ctx *middleware.Context, handler GetMaterialByPostIDHandler) *GetMaterialByPostID {
	return &GetMaterialByPostID{Context: ctx, Handler: handler}
}

/* GetMaterialByPostID swagger:route GET /api/post/{id}/materials post getMaterialByPostId

Gets a material by postID.

*/
type GetMaterialByPostID struct {
	Context *middleware.Context
	Handler GetMaterialByPostIDHandler
}

func (o *GetMaterialByPostID) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewGetMaterialByPostIDParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
