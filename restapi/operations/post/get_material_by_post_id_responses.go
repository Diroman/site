// Code generated by go-swagger; DO NOT EDIT.

package post

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"lawSite/models"
)

// GetMaterialByPostIDOKCode is the HTTP code returned for type GetMaterialByPostIDOK
const GetMaterialByPostIDOKCode int = 200

/*GetMaterialByPostIDOK successful operation

swagger:response getMaterialByPostIdOK
*/
type GetMaterialByPostIDOK struct {

	/*
	  In: Body
	*/
	Payload *models.MaterialList `json:"body,omitempty"`
}

// NewGetMaterialByPostIDOK creates GetMaterialByPostIDOK with default headers values
func NewGetMaterialByPostIDOK() *GetMaterialByPostIDOK {

	return &GetMaterialByPostIDOK{}
}

// WithPayload adds the payload to the get material by post Id o k response
func (o *GetMaterialByPostIDOK) WithPayload(payload *models.MaterialList) *GetMaterialByPostIDOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get material by post Id o k response
func (o *GetMaterialByPostIDOK) SetPayload(payload *models.MaterialList) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetMaterialByPostIDOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetMaterialByPostIDBadRequestCode is the HTTP code returned for type GetMaterialByPostIDBadRequest
const GetMaterialByPostIDBadRequestCode int = 400

/*GetMaterialByPostIDBadRequest Bad request

swagger:response getMaterialByPostIdBadRequest
*/
type GetMaterialByPostIDBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewGetMaterialByPostIDBadRequest creates GetMaterialByPostIDBadRequest with default headers values
func NewGetMaterialByPostIDBadRequest() *GetMaterialByPostIDBadRequest {

	return &GetMaterialByPostIDBadRequest{}
}

// WithPayload adds the payload to the get material by post Id bad request response
func (o *GetMaterialByPostIDBadRequest) WithPayload(payload *models.Error) *GetMaterialByPostIDBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get material by post Id bad request response
func (o *GetMaterialByPostIDBadRequest) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetMaterialByPostIDBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetMaterialByPostIDInternalServerErrorCode is the HTTP code returned for type GetMaterialByPostIDInternalServerError
const GetMaterialByPostIDInternalServerErrorCode int = 500

/*GetMaterialByPostIDInternalServerError Server error

swagger:response getMaterialByPostIdInternalServerError
*/
type GetMaterialByPostIDInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewGetMaterialByPostIDInternalServerError creates GetMaterialByPostIDInternalServerError with default headers values
func NewGetMaterialByPostIDInternalServerError() *GetMaterialByPostIDInternalServerError {

	return &GetMaterialByPostIDInternalServerError{}
}

// WithPayload adds the payload to the get material by post Id internal server error response
func (o *GetMaterialByPostIDInternalServerError) WithPayload(payload *models.Error) *GetMaterialByPostIDInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get material by post Id internal server error response
func (o *GetMaterialByPostIDInternalServerError) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetMaterialByPostIDInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
