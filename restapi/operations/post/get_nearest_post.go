// Code generated by go-swagger; DO NOT EDIT.

package post

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// GetNearestPostHandlerFunc turns a function with the right signature into a get nearest post handler
type GetNearestPostHandlerFunc func(GetNearestPostParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetNearestPostHandlerFunc) Handle(params GetNearestPostParams) middleware.Responder {
	return fn(params)
}

// GetNearestPostHandler interface for that can handle valid get nearest post params
type GetNearestPostHandler interface {
	Handle(GetNearestPostParams) middleware.Responder
}

// NewGetNearestPost creates a new http.Handler for the get nearest post operation
func NewGetNearestPost(ctx *middleware.Context, handler GetNearestPostHandler) *GetNearestPost {
	return &GetNearestPost{Context: ctx, Handler: handler}
}

/* GetNearestPost swagger:route GET /api/post/nearest_event post getNearestPost

Nearest post for main page

*/
type GetNearestPost struct {
	Context *middleware.Context
	Handler GetNearestPostHandler
}

func (o *GetNearestPost) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewGetNearestPostParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
