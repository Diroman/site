// Code generated by go-swagger; DO NOT EDIT.

package post

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// NewGetPostListParams creates a new GetPostListParams object
//
// There are no default values defined in the spec.
func NewGetPostListParams() GetPostListParams {

	return GetPostListParams{}
}

// GetPostListParams contains all the bound params for the get post list operation
// typically these are obtained from a http.Request
//
// swagger:parameters getPostList
type GetPostListParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*
	  In: query
	*/
	ByTime *string
	/*
	  In: query
	*/
	DateFrom *string
	/*
	  In: query
	*/
	DateTo *string
	/*
	  In: query
	*/
	EventType *string
	/*
	  In: query
	*/
	Limit *int64
	/*
	  In: query
	*/
	Offset *int64
	/*
	  In: query
	*/
	Order *string
	/*
	  In: query
	*/
	SortBy *string
	/*
	  In: query
	*/
	Text *string
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewGetPostListParams() beforehand.
func (o *GetPostListParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	qs := runtime.Values(r.URL.Query())

	qByTime, qhkByTime, _ := qs.GetOK("byTime")
	if err := o.bindByTime(qByTime, qhkByTime, route.Formats); err != nil {
		res = append(res, err)
	}

	qDateFrom, qhkDateFrom, _ := qs.GetOK("dateFrom")
	if err := o.bindDateFrom(qDateFrom, qhkDateFrom, route.Formats); err != nil {
		res = append(res, err)
	}

	qDateTo, qhkDateTo, _ := qs.GetOK("dateTo")
	if err := o.bindDateTo(qDateTo, qhkDateTo, route.Formats); err != nil {
		res = append(res, err)
	}

	qEventType, qhkEventType, _ := qs.GetOK("eventType")
	if err := o.bindEventType(qEventType, qhkEventType, route.Formats); err != nil {
		res = append(res, err)
	}

	qLimit, qhkLimit, _ := qs.GetOK("limit")
	if err := o.bindLimit(qLimit, qhkLimit, route.Formats); err != nil {
		res = append(res, err)
	}

	qOffset, qhkOffset, _ := qs.GetOK("offset")
	if err := o.bindOffset(qOffset, qhkOffset, route.Formats); err != nil {
		res = append(res, err)
	}

	qOrder, qhkOrder, _ := qs.GetOK("order")
	if err := o.bindOrder(qOrder, qhkOrder, route.Formats); err != nil {
		res = append(res, err)
	}

	qSortBy, qhkSortBy, _ := qs.GetOK("sortBy")
	if err := o.bindSortBy(qSortBy, qhkSortBy, route.Formats); err != nil {
		res = append(res, err)
	}

	qText, qhkText, _ := qs.GetOK("text")
	if err := o.bindText(qText, qhkText, route.Formats); err != nil {
		res = append(res, err)
	}
	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindByTime binds and validates parameter ByTime from query.
func (o *GetPostListParams) bindByTime(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		return nil
	}
	o.ByTime = &raw

	if err := o.validateByTime(formats); err != nil {
		return err
	}

	return nil
}

// validateByTime carries on validations for parameter ByTime
func (o *GetPostListParams) validateByTime(formats strfmt.Registry) error {

	if err := validate.EnumCase("byTime", "query", *o.ByTime, []interface{}{"all", "new", "old"}, true); err != nil {
		return err
	}

	return nil
}

// bindDateFrom binds and validates parameter DateFrom from query.
func (o *GetPostListParams) bindDateFrom(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		return nil
	}
	o.DateFrom = &raw

	return nil
}

// bindDateTo binds and validates parameter DateTo from query.
func (o *GetPostListParams) bindDateTo(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		return nil
	}
	o.DateTo = &raw

	return nil
}

// bindEventType binds and validates parameter EventType from query.
func (o *GetPostListParams) bindEventType(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		return nil
	}
	o.EventType = &raw

	if err := o.validateEventType(formats); err != nil {
		return err
	}

	return nil
}

// validateEventType carries on validations for parameter EventType
func (o *GetPostListParams) validateEventType(formats strfmt.Registry) error {

	if err := validate.EnumCase("eventType", "query", *o.EventType, []interface{}{"lecture", "masterClass", "conference", "training", "webinars"}, true); err != nil {
		return err
	}

	return nil
}

// bindLimit binds and validates parameter Limit from query.
func (o *GetPostListParams) bindLimit(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		return nil
	}

	value, err := swag.ConvertInt64(raw)
	if err != nil {
		return errors.InvalidType("limit", "query", "int64", raw)
	}
	o.Limit = &value

	return nil
}

// bindOffset binds and validates parameter Offset from query.
func (o *GetPostListParams) bindOffset(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		return nil
	}

	value, err := swag.ConvertInt64(raw)
	if err != nil {
		return errors.InvalidType("offset", "query", "int64", raw)
	}
	o.Offset = &value

	return nil
}

// bindOrder binds and validates parameter Order from query.
func (o *GetPostListParams) bindOrder(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		return nil
	}
	o.Order = &raw

	if err := o.validateOrder(formats); err != nil {
		return err
	}

	return nil
}

// validateOrder carries on validations for parameter Order
func (o *GetPostListParams) validateOrder(formats strfmt.Registry) error {

	if err := validate.EnumCase("order", "query", *o.Order, []interface{}{"asc", "desc"}, true); err != nil {
		return err
	}

	return nil
}

// bindSortBy binds and validates parameter SortBy from query.
func (o *GetPostListParams) bindSortBy(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		return nil
	}
	o.SortBy = &raw

	if err := o.validateSortBy(formats); err != nil {
		return err
	}

	return nil
}

// validateSortBy carries on validations for parameter SortBy
func (o *GetPostListParams) validateSortBy(formats strfmt.Registry) error {

	if err := validate.EnumCase("sortBy", "query", *o.SortBy, []interface{}{"popularity", "date", "create_date"}, true); err != nil {
		return err
	}

	return nil
}

// bindText binds and validates parameter Text from query.
func (o *GetPostListParams) bindText(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		return nil
	}
	o.Text = &raw

	return nil
}
