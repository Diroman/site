// Code generated by go-swagger; DO NOT EDIT.

package post

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"lawSite/models"
)

// GetRecommendedPostOKCode is the HTTP code returned for type GetRecommendedPostOK
const GetRecommendedPostOKCode int = 200

/*GetRecommendedPostOK successful operation

swagger:response getRecommendedPostOK
*/
type GetRecommendedPostOK struct {

	/*
	  In: Body
	*/
	Payload *models.PostList `json:"body,omitempty"`
}

// NewGetRecommendedPostOK creates GetRecommendedPostOK with default headers values
func NewGetRecommendedPostOK() *GetRecommendedPostOK {

	return &GetRecommendedPostOK{}
}

// WithPayload adds the payload to the get recommended post o k response
func (o *GetRecommendedPostOK) WithPayload(payload *models.PostList) *GetRecommendedPostOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get recommended post o k response
func (o *GetRecommendedPostOK) SetPayload(payload *models.PostList) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetRecommendedPostOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetRecommendedPostBadRequestCode is the HTTP code returned for type GetRecommendedPostBadRequest
const GetRecommendedPostBadRequestCode int = 400

/*GetRecommendedPostBadRequest Invalid status value

swagger:response getRecommendedPostBadRequest
*/
type GetRecommendedPostBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewGetRecommendedPostBadRequest creates GetRecommendedPostBadRequest with default headers values
func NewGetRecommendedPostBadRequest() *GetRecommendedPostBadRequest {

	return &GetRecommendedPostBadRequest{}
}

// WithPayload adds the payload to the get recommended post bad request response
func (o *GetRecommendedPostBadRequest) WithPayload(payload *models.Error) *GetRecommendedPostBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get recommended post bad request response
func (o *GetRecommendedPostBadRequest) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetRecommendedPostBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetRecommendedPostInternalServerErrorCode is the HTTP code returned for type GetRecommendedPostInternalServerError
const GetRecommendedPostInternalServerErrorCode int = 500

/*GetRecommendedPostInternalServerError Internal server error

swagger:response getRecommendedPostInternalServerError
*/
type GetRecommendedPostInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewGetRecommendedPostInternalServerError creates GetRecommendedPostInternalServerError with default headers values
func NewGetRecommendedPostInternalServerError() *GetRecommendedPostInternalServerError {

	return &GetRecommendedPostInternalServerError{}
}

// WithPayload adds the payload to the get recommended post internal server error response
func (o *GetRecommendedPostInternalServerError) WithPayload(payload *models.Error) *GetRecommendedPostInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get recommended post internal server error response
func (o *GetRecommendedPostInternalServerError) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetRecommendedPostInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
