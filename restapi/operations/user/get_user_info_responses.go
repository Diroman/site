// Code generated by go-swagger; DO NOT EDIT.

package user

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"lawSite/models"
)

// GetUserInfoOKCode is the HTTP code returned for type GetUserInfoOK
const GetUserInfoOKCode int = 200

/*GetUserInfoOK successful operation

swagger:response getUserInfoOK
*/
type GetUserInfoOK struct {

	/*
	  In: Body
	*/
	Payload *models.User `json:"body,omitempty"`
}

// NewGetUserInfoOK creates GetUserInfoOK with default headers values
func NewGetUserInfoOK() *GetUserInfoOK {

	return &GetUserInfoOK{}
}

// WithPayload adds the payload to the get user info o k response
func (o *GetUserInfoOK) WithPayload(payload *models.User) *GetUserInfoOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get user info o k response
func (o *GetUserInfoOK) SetPayload(payload *models.User) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetUserInfoOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetUserInfoBadRequestCode is the HTTP code returned for type GetUserInfoBadRequest
const GetUserInfoBadRequestCode int = 400

/*GetUserInfoBadRequest Bad request

swagger:response getUserInfoBadRequest
*/
type GetUserInfoBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewGetUserInfoBadRequest creates GetUserInfoBadRequest with default headers values
func NewGetUserInfoBadRequest() *GetUserInfoBadRequest {

	return &GetUserInfoBadRequest{}
}

// WithPayload adds the payload to the get user info bad request response
func (o *GetUserInfoBadRequest) WithPayload(payload *models.Error) *GetUserInfoBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get user info bad request response
func (o *GetUserInfoBadRequest) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetUserInfoBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetUserInfoUnauthorizedCode is the HTTP code returned for type GetUserInfoUnauthorized
const GetUserInfoUnauthorizedCode int = 401

/*GetUserInfoUnauthorized not valid token

swagger:response getUserInfoUnauthorized
*/
type GetUserInfoUnauthorized struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewGetUserInfoUnauthorized creates GetUserInfoUnauthorized with default headers values
func NewGetUserInfoUnauthorized() *GetUserInfoUnauthorized {

	return &GetUserInfoUnauthorized{}
}

// WithPayload adds the payload to the get user info unauthorized response
func (o *GetUserInfoUnauthorized) WithPayload(payload *models.Error) *GetUserInfoUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get user info unauthorized response
func (o *GetUserInfoUnauthorized) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetUserInfoUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetUserInfoNotFoundCode is the HTTP code returned for type GetUserInfoNotFound
const GetUserInfoNotFoundCode int = 404

/*GetUserInfoNotFound User not found

swagger:response getUserInfoNotFound
*/
type GetUserInfoNotFound struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewGetUserInfoNotFound creates GetUserInfoNotFound with default headers values
func NewGetUserInfoNotFound() *GetUserInfoNotFound {

	return &GetUserInfoNotFound{}
}

// WithPayload adds the payload to the get user info not found response
func (o *GetUserInfoNotFound) WithPayload(payload *models.Error) *GetUserInfoNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get user info not found response
func (o *GetUserInfoNotFound) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetUserInfoNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetUserInfoInternalServerErrorCode is the HTTP code returned for type GetUserInfoInternalServerError
const GetUserInfoInternalServerErrorCode int = 500

/*GetUserInfoInternalServerError Server error

swagger:response getUserInfoInternalServerError
*/
type GetUserInfoInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewGetUserInfoInternalServerError creates GetUserInfoInternalServerError with default headers values
func NewGetUserInfoInternalServerError() *GetUserInfoInternalServerError {

	return &GetUserInfoInternalServerError{}
}

// WithPayload adds the payload to the get user info internal server error response
func (o *GetUserInfoInternalServerError) WithPayload(payload *models.Error) *GetUserInfoInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get user info internal server error response
func (o *GetUserInfoInternalServerError) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetUserInfoInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
