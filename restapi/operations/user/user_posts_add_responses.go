// Code generated by go-swagger; DO NOT EDIT.

package user

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"lawSite/models"
)

// UserPostsAddOKCode is the HTTP code returned for type UserPostsAddOK
const UserPostsAddOKCode int = 200

/*UserPostsAddOK successful operation

swagger:response userPostsAddOK
*/
type UserPostsAddOK struct {
}

// NewUserPostsAddOK creates UserPostsAddOK with default headers values
func NewUserPostsAddOK() *UserPostsAddOK {

	return &UserPostsAddOK{}
}

// WriteResponse to the client
func (o *UserPostsAddOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(200)
}

// UserPostsAddBadRequestCode is the HTTP code returned for type UserPostsAddBadRequest
const UserPostsAddBadRequestCode int = 400

/*UserPostsAddBadRequest Bad request

swagger:response userPostsAddBadRequest
*/
type UserPostsAddBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewUserPostsAddBadRequest creates UserPostsAddBadRequest with default headers values
func NewUserPostsAddBadRequest() *UserPostsAddBadRequest {

	return &UserPostsAddBadRequest{}
}

// WithPayload adds the payload to the user posts add bad request response
func (o *UserPostsAddBadRequest) WithPayload(payload *models.Error) *UserPostsAddBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the user posts add bad request response
func (o *UserPostsAddBadRequest) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UserPostsAddBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// UserPostsAddUnauthorizedCode is the HTTP code returned for type UserPostsAddUnauthorized
const UserPostsAddUnauthorizedCode int = 401

/*UserPostsAddUnauthorized not valid token

swagger:response userPostsAddUnauthorized
*/
type UserPostsAddUnauthorized struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewUserPostsAddUnauthorized creates UserPostsAddUnauthorized with default headers values
func NewUserPostsAddUnauthorized() *UserPostsAddUnauthorized {

	return &UserPostsAddUnauthorized{}
}

// WithPayload adds the payload to the user posts add unauthorized response
func (o *UserPostsAddUnauthorized) WithPayload(payload *models.Error) *UserPostsAddUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the user posts add unauthorized response
func (o *UserPostsAddUnauthorized) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UserPostsAddUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// UserPostsAddInternalServerErrorCode is the HTTP code returned for type UserPostsAddInternalServerError
const UserPostsAddInternalServerErrorCode int = 500

/*UserPostsAddInternalServerError Server error

swagger:response userPostsAddInternalServerError
*/
type UserPostsAddInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewUserPostsAddInternalServerError creates UserPostsAddInternalServerError with default headers values
func NewUserPostsAddInternalServerError() *UserPostsAddInternalServerError {

	return &UserPostsAddInternalServerError{}
}

// WithPayload adds the payload to the user posts add internal server error response
func (o *UserPostsAddInternalServerError) WithPayload(payload *models.Error) *UserPostsAddInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the user posts add internal server error response
func (o *UserPostsAddInternalServerError) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UserPostsAddInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
